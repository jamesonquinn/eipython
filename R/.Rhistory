jscores
apply(jscores,1,rank)
T(apply(jscores,1,rank))
t(apply(jscores,1,rank))
library(data.table)
onerun = function() {
n = 16
truemu = 5.2
truesig = .5
njudge = 9
jsig = .2
truescores = rnorm(n,truemu,truesig)
jscores = matrix(rnorm(n*njudge,truescores,jsig),n)
jscores = pmin(jscores,6)
jranks = t(apply(jscores,1,rank))
medians = apply(jranks,1,median)
means = apply(jranks,1,mean)
data.table(
medvar = var(rank(medians)-rank(truescores)),
meanvar = var(rank(means)-rank(truescores)),
medwin = (order(medians)[n] == order(truescores)[n]),
meanwin = (order(means)[n] == order(truescores)[n])
)
}
allresults = data.table()
for (i in 1:1000) {
allresults = rbind(allresults, onerun(),fill=T)
}
apply(allresults,2,mean)
apply(allresults,2,mean)
qchisq(1)
qchisq(1,1)
qchisq(1,2)
pchisq(1,2)
pchisq(2,2)
pchisq(3,2)
pchisq(1,1)
pchisq(100,100)
pchisq(1000,1000)
matrix(1:4,nrow=2)
library(knitr)
knitr::version
sessionInfo()
save.image("~/Empty.RData")
?pt
pt(0,5)
pt(2,5)
?lm
?pt
?corr.test
pf
?pf
for (i in 0:3) {print(c(.3,.4) * (2/3)^i)}
for (i in 0:3) {print(c(.3,.4) * (3/4)^i)}
for (i in 0:3) {print(c(.5) * (3/4)^i)}
?qplot
library(ggplot2)
library(data.table)
varidat = data.table(x=(-200:200)/100)
truepost = varidat[,]
truepost[,series:="True posterior"]
truepost[,y:=-x^2+sin(x^2)/2]
qplot(varidat,x=x,y=y)
?qplot
qplot(x,y,varidat)
head(varidat)
qplot(x,y,data=varidat)
truepost[,y:=-x^2+sin(4*x^2)/2]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+sin(4*x^2)/(x^2+1)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+sin(4*x^2)/2/(x^2+1)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+sin(4*(x-1)^2)/1.5/((x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+sin(4*(x-1)^2)/1.5/(3*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(4*(x-1)^2)/1.5/(3*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*(x-1)^2)/1.5/(6*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*(x-1)^(1/3))/1.5/(6*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*(x-1)^(1/3))/1.5/(6*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*arctan(x-1))/1.5/(6*(x-1)^2+.8)]
truepost[,y:=-x^2+cos(8*atan(x-1))/1.5/(6*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*atan(x-1))/2/(6*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*atan(x-1.5))/2/(6*(x-2)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=1-x^2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=log(1+x^2/5)*3+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
varidat = data.table(x=(-300:300)/100)
truepost = varidat[,]
truepost[,series:="True posterior"]
truepost[,y:=log(1+x^2/2)*3+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=1-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
varidat = data.table(x=(-300:300)/100)
truepost = copy(varidat)
truepost[,series:="True posterior"]
truepost[,y:=1-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=truepost)
truepost[,y:=3-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=truepost)
qplot(x,y,data=varidat)
combined = data.table()
varidat = data.table(x=(-300:300)/100)
varidat[,series:="True posterior"]
varidat[,y:=3-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
combined = rbind(combined,varidat,fill=T)
combined = data.table()
varidat = data.table(x=(-300:300)/100)
varidat[,series:="True posterior"]
varidat[,y:=3-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Best Gaussian"]
varidat[,y:=-x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Underdispersed"]
varidat[,y:=log(2)-2*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Overdispersed"]
varidat[,y:=-log(2)-.5*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Misplaced"]
varidat[,y:=log(2)-2*(x-1.5)^2]
combined = rbind(combined,varidat,fill=T)
qplot(x,y,data=combined)
qplot(x,y,color=series,data=combined)
combined[y< -10, y:=NA]
qplot(x,y,color=series,data=combined)
combined = data.table()
varidat = data.table(x=(-300:300)/100)
varidat[,series:="True posterior"]
varidat[,y:=3-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Best Gaussian"]
varidat[,y:=-x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Underdispersed"]
varidat[,y:=log(2)-2*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Overdispersed"]
varidat[,y:=-log(2)-.5*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Misplaced"]
varidat[,y:=log(16)-16*(x-1.3)^2]
combined = rbind(combined,varidat,fill=T)
combined[y< -10, y:=NA]
qplot(x,y,color=series,data=combined)
varidat[,y:=log(16)-16*(x-1.45)^2]
combined = data.table()
varidat = data.table(x=(-300:300)/100)
varidat[,series:="True posterior"]
varidat[,y:=3-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Best Gaussian"]
varidat[,y:=-x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Underdispersed"]
varidat[,y:=log(2)-2*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Overdispersed"]
varidat[,y:=-log(2)-.5*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Misplaced"]
varidat[,y:=log(16)-16*(x-1.45)^2]
combined = rbind(combined,varidat,fill=T)
combined[y< -10, y:=NA]
qplot(x,y,color=series,data=combined)
combined = data.table()
varidat = data.table(x=(-300:300)/100)
varidat[,series:="True posterior"]
varidat[,y:=3-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Best Gaussian"]
varidat[,y:=-x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Underdispersed"]
varidat[,y:=log(2)-2*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Overdispersed"]
varidat[,y:=-log(2)-.5*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Misplaced (local maximum)"]
varidat[,y:=log(16)-16*(x-1.46)^2]
combined = rbind(combined,varidat,fill=T)
filtered = combined[y> -10, ]
qplot(x,y,color=series,data=filtered)
qplot(x,y,color=series,data=filtered) + theme_void()
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
dict = function(...){list(...)}
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
fat_metrics$leftelbows
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
print(ggplot(data.table(mcmc=c(samples[,i],
mymean[i])), aes(x=mcmc)) + #cheating to force axis
geom_histogram(aes(y=..density..)) +
scale_colour_manual(name="Which is which?",
values=c(red="red", blue="blue"),
labels=c(red="Truth (is out of style)", blue="Fiction (still imitating truth)")) +
stat_function(fun=dnorm, args = list(mean=mymean[i], sd = sqrt(mycovar[i,i])), colour="red") +
stat_function(fun=dnorm, args = list(mean=mymean[i] + 1, sd = sqrt(mycovar[i,i])), colour="blue") +
labs(title=qq("@{guide}; @{S} subsamples"),
x = var_names[i])) +
scale_colour_manual(name="Which is which?",
values=c(red="red", blue="blue"),
labels=c(red="Truth (is out of style)", blue="Fiction (still imitating truth)"))
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
ggp +scale_color_manual("Line.Color", values=c(red="red",green="green",blue="blue"),
labels=paste0("Int",1:3))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
mtcars
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
library(latex2exp)
install.packages("latex2exp")
library(latex2exp)
TeX(paste("a",1:2))
var_names = c(TeX("$\\mu$"),TeX("$\\varsigma$"),TeX("$d$"))
for (i in 1:44) {
var_names = c(var_names,TeX(qq("$T_@{i}$"))
}
all_guides = c("amortized_laplace",
"unamortized_laplace",
"meanfield")
ts = function(x){x}
dict = function(...){list(...)}
base_scale = 1.
modal_effect = .5*base_scale
tdom_fat_params = dict(modal_effect=ts(modal_effect),
df=ts(-1.),
t_scale=ts(1.))
#
ndom_fat_params = dict(modal_effect=ts(modal_effect),
df=ts(-1.),
t_scale=ts(-1.))
#
tdom_norm_params = dict(modal_effect=ts(modal_effect),
df=ts(3.),
t_scale=ts(1.))
#
ndom_norm_params = dict(modal_effect=ts(modal_effect),
df=ts(3.),
t_scale=ts(-1.))
model = stan_model("../stan/multisite.stan")
if (FALSE) { #old noodling-around code
data = fread("../testresults/scenario_N44_mu1.0_sigma2.0_nu3.0.csv")
fit1 = sampling(model, data = list(N=length(data[,s]), se=data[,s], x=data[,x]))
plot(fit1)
data = fread("../testresults/scenario_N44_mu1.0_sigma2.0_nu-1.0.csv")
fit2 = sampling(model, data = list(N=length(data[,s]), se=data[,s], x=data[,x]))
plot(fit2)
fitframe = extract(fit1)
names(fitframe)
fitframe$T
fitmat = as.matrix(fit1)
dim(fitmat)
head(fitmat)
o = fromJSON(file="../testresults/fit_amortized_laplace_0_N44_mu1.0_sigma-2.0_nu-1.0.csv")
rawhess = unlist(o$raw_hessian)
d = sqrt(length(rawhess))
hess = matrix(rawhess,d,d)
dim(hess)
hess[0:8,0:5]
#getDensity(vec, )
}
specify_decimal = function(x, k=1) trimws(format(round(x, k), nsmall=k))
nameWithParams = function(filebase, trueparams, S=NA, N=DEFAULT_N){
if (is.na(S)) {
qq("@{filebase}_N@{N}_mu@{specify_decimal(trueparams$modal_effect)}_sigma@{specify_decimal(trueparams$t_scale)}_nu@{specify_decimal(MIN_DF)}+exp@{specify_decimal(trueparams$df)}.csv")
} else {
qq("@{filebase}_N@{N}_S@{S}_mu@{specify_decimal(trueparams$modal_effect)}_sigma@{specify_decimal(trueparams$t_scale)}_nu@{specify_decimal(MIN_DF)}+exp@{specify_decimal(trueparams$df)}.csv")
}
}
getScenario = function(params) {
fread(nameWithParams("../testresults/scenario",params))
}
getMCMCfor = function(params) {
scenario = getScenario(params)
afit = sampling(model, data = list(N=length(scenario[,s]),
se=scenario[,s],
x=scenario[,x],
maxError=maxError,
mindf=MIN_DF,
smean=SMEAN,
dmean=DMEAN,
dscale=DSCALE,
sscale=SSCALE))
amat = as.matrix(afit)
return(amat)
}
getRawFitFor = function(params,S,guide ="amortized_laplace"){
jsonName = nameWithParams(qq("../testresults/fit_@{guide}_0"),params,S)
print(jsonName)
fittedGuide = fromJSON(file=jsonName)
if (guide=="meanfield") {
hess = diag(fittedGuide$auto_scale**2)
mean = fittedGuide$auto_loc
d = length(mean)
} else {
rawhess = unlist(fittedGuide$raw_hessian)
d = sqrt(length(rawhess))
hess = matrix(rawhess,d,d)
mean = c(fittedGuide$ahat_data$modal_effect,
fittedGuide$ahat_data$t_scale_raw,
log(fittedGuide$df - MIN_DF),
fittedGuide$ahat_data$t_part)
}
return(list(mean=mean,hess=hess,d=d))
}
getFitFor = function(params,S,guide ="amortized_laplace"){
jsonName = nameWithParams(qq("../testresults/fit_@{guide}_0"),params,S)
print(jsonName)
fittedGuide = fromJSON(file=jsonName)
if (guide=="meanfield") {
hess = diag(fittedGuide$auto_scale**2)
mean = fittedGuide$auto_loc
d = length(mean)
} else {
rawhess = unlist(fittedGuide$raw_hessian)
d = sqrt(length(rawhess))
hess = matrix(rawhess,d,d)
mean = c(fittedGuide$ahat_data$modal_effect,
fittedGuide$ahat_data$t_scale_raw,
log(fittedGuide$df - MIN_DF),
fittedGuide$ahat_data$t_part)
}
return(list(mean=mean,hess=hess,d=d))
}
get_coverages = function(samples, mymean, mycovar, alpha=c(0.05,.5)) {
z_interval = qnorm(1-alpha/2)
raw_result = matrix(NA,length(mymean),length(alpha))
for (i in 1:length(mymean)) {
for (j in 1:length(alpha)) {
raw_result[i,j] = mean(mymean[i] - z_interval[j] * sqrt(mycovar[i,i]) < samples[,i] &
samples[,i] < mymean[i] + z_interval[j] * sqrt(mycovar[i,i]))
}
}
result = raw_result[1:4,]
result[4,] = colMeans(raw_result[4:length(mymean),])
return(result)
}
graph_mcmc = function(samples) {
for (i in )
}
graph_coverages = function(samples, mymean, mycovar, guide, S) {
print(colnames(samples))
for (i in 1:4) {
print(ggplot(data.table(mcmc=c(samples[,i],
mymean[i])), aes(x=mcmc)) + #cheating to force axis
geom_histogram(aes(y=..density..)) +
scale_colour_manual(name="Which is which?",
values=c(red="red", blue="blue"),
labels=c(red="Truth (is out of style)", blue="Fiction (still imitating truth)")) +
stat_function(fun=dnorm, args = list(mean=mymean[i], sd = sqrt(mycovar[i,i])), aes(colour="red"), show.legend=TRUE) +
stat_function(fun=dnorm, args = list(mean=mymean[i] + 1, sd = sqrt(mycovar[i,i])), aes(colour="blue"), show.legend=TRUE) +
labs(title=qq("@{guide}; @{S} subsamples"),
x = var_names[i])) +
scale_colour_identity(name="Which is which?", guide="legend",
#values=c(red="red", blue="blue"),
labels=c(red="Truth (is out of style)", blue="Fiction (still imitating truth)"))
}
}
get_metrics_for = function(params,guides = all_guides, dographs=all_guides) {
amat = getMCMCfor(params)
leftelbows = list()
coverages = list()
print(paste("guides:",guides))
for (guide in guides) {
for (S in c(DEFAULT_N,SMALL_S) ) {
print(paste("guide:",guide))
meanhess = getRawFitFor(params,S,guide)
mean = meanhess$mean
hess = meanhess$hess
d = meanhess$d
covar = solve(hess)
#print("mean")
#print(mean)
dens = dmvnorm(amat[,1:d],mean,covar,log=TRUE)
#print(rbind(amat[99:100,1:d],mean,sqrt(1/diag(hess))))
#print(paste(guide,head(dens)))
if (!(guide %in% names(leftelbows))) {
leftelbows[[guide]] = list()
coverages[[guide]] = list()
}
leftelbows[[guide]][[toString(S)]] = klOfLogdensities(amat[,48],dens)
coverages[[guide]][[toString(S)]] = get_coverages(amat,mean,covar)
if (guide %in% dographs) {
graph_coverages(amat,mean,covar,guide,S)
}
#guide = "meanfield"
}
}
return(list(leftelbows=leftelbows,coverages=coverages))
}
klOfLogdensities = function(a,b) {
return(mean(a) - mean(b))
}
fat_metrics = get_metrics_for(ndom_fat_params,dographs=all_guides[1])
#norm_metrics = get_metrics_for(ndom_norm_params,dographs=c())
arrowhead = function(a,b,c,n) {
result = matrix(0,n,n)
result[1,1] = a - 2 * b[1] - c[1]
result[1,] = result[1,] + b
result[,1] = result[,1] + b
result = result + diag(c,n)
return(result)
}
arrowblockhead = function(a,b,c,n,p) {
result = matrix(0,n,n)
result[1:p,1:p] = a - 2 * b[1:p,] - c[1]
result[1:p,] = result[1:p,] + b
result[,1:p] = result[,1:p] + t(b)
result = result + diag(c,n)
return(result)
}
var_names = c(TeX("$\\mu$"),TeX("$\\varsigma$"),TeX("$d$"))
for (i in 1:44) {
var_names = c(var_names,TeX(qq("$T_@{i}$")))
}
var_names
line_type = list("22"=2,"44"=1)
line_type
ll = list(1=2,3=4)
ll = list()
ll[[3]] = 4
ll
length(ll)
ll[["asdt"]] = 4
length(ll)
ll
names(ll)
all_guides = c("amortized_laplace",
"unamortized_laplace",
"meanfield")
guide_colors = c("red","blue","green")
names(guide_colors) = all_guides
guide_colors
toString(SUBSAMPLE_NS)
DEFAULT_N = 44
SMALL_S = 22
SUBSAMPLE_NS = c(DEFAULT_N, SMALL_S)
toString(SUBSAMPLE_NS)
as.character(SUBSAMPLE_NS)
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
return(rawgraph +
scale_colour_manual(name="Guide family",
values=guide_colors,
labels=guide_labels) +
scale_linetype(name="Subsampling?",
#  values =subsample_line_types,
labels = subsample_labels))
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
guide_labels
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
1
1
1
source('~/Dropbox/eipython/eipython/R/multisiteStan.R')
