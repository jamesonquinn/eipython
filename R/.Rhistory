r = mSimsResult(gamma=2, pZ=.5, m=5)
r
r
knitr::opts_chunk$set(echo = TRUE)
swede = fread("data-set5.txt")
swede = fread("data-set5.txt")
swede = fread("data-set5.txt")
library(data.table) #Not strictly necessary, but makes working with dataframes so much more concise
library(survey)
swede = fread("data-set5.txt")
dontprint=swede[,`:=`(pr1=n*NCLUS/NN,
pr2=2/NCLUS,
w1=1/pr1,
w2=1/pr2,
fpc1=50,
fpc2=NCLUS)] #the multi-columns-at-once version of the above;
dontprint=swede[,`:=`(pr1=n*NCLUS/nmuni,
pr2=2/NCLUS,
w1=1/pr1,
w2=1/pr2,
fpc1=50,
fpc2=NCLUS)] #the multi-columns-at-once version of the above;
swede = fread("data-set5.txt")
nmuni = 284
N = 50
n = 15
#The variable dontprint is just to soak up the output so it doesn't print.
dontprint=swede[,`:=`(pr1=n*NCLUS/nmuni,
pr2=2/NCLUS,
w1=1/pr1,
w2=1/pr2,
fpc1=50,
fpc2=NCLUS)] #the m
swede.design = svydesign(data=swede,id=~CL+LABEL,weights=~1/pr1+1/pr2,fpc=~fpc1+fpc2,
variables=~P85 + SS82 + REV84)
dontprint=swede[,`:=`(pr1=n*NCLUS/nmuni,
pr2=2/NCLUS,
fpc1=50,
fpc2=NCLUS)] #the multi-columns-at-once version of the above;
swede.design = svydesign(data=swede,id=~CL+LABEL,weights=~1/pr1+1/pr2,fpc=~fpc1+fpc2,
variables=~P85 + SS82 + REV84)
svymean(~P85 + SS82 + REV84, swede.design, deff=T)
swede.design = svydesign(data=swede,id=~CL+LABEL,fpc=~fpc1+fpc2,
variables=~P85 + SS82 + REV84)
svymean(~P85 + SS82 + REV84, swede.design, deff=T)
olswede = lm(RMT85~P85, data=swede)
summary(ls)
summary(olswede)
regswede = svyglm(RMT85~P85,design=swede.design)
swede.design = svydesign(data=swede,id=~CL+LABEL,fpc=~fpc1+fpc2,
variables=~P85 + SS82 + REV84 + RMT85)
olswede = lm(RMT85~P85, data=swede)
summary(olswede)
dontprint=swede[,`:=`(w1=1/p1,
w2=1/p2)] #the multi-columns-at-once version of the above;
swede.design = svydesign(data=swede,id=~CL+LABEL,fpc=~fpc1+fpc2,weights=~w1+w2
variables=~P85 + SS82 + REV84 + RMT85)
swede.design = svydesign(data=swede,id=~CL+LABEL,fpc=~fpc1+fpc2,weights=~w1+w2,
variables=~P85 + SS82 + REV84 + RMT85)
svymean(~P85 + SS82 + REV84, swede.design, deff=T)
regswede = svyglm(RMT85~P85,design=swede.design)
summary(regswede)
fit.naive = svydesign(data=swede, ids=~1, variables=~P85+P75+RMT85)
total.naive = svytotal(~RMT85+P75+P85, fit.pps)
swede = fread("data-set5.txt")
nmuni = 284
N = 50
n = 15
#The variable dontprint is just to soak up the output so it doesn't print.
dontprint=swede[,`:=`(pr1=n*NCLUS/nmuni,
pr2=2/NCLUS,
fpc1=50,
fpc2=NCLUS)] #the multi-columns-at-once version of the above;
#.I is a magic counter variable.
dontprint=swede[,`:=`(w1=1/p1,
w2=1/p2)] #the multi-columns-at-once version of the above;
#.I is a magic counter variable.
fit.naive = svydesign(data=swede, ids=~1, variables=~P85+P75+RMT85)
total.naive = svytotal(~RMT85+P75+P85, fit.pps)
total.naive = svytotal(~RMT85+P75+P85, fit.naive)
cat("Theta =",total.naive[1]*total.naive[2]/total.naive[3],"\n")
total.naive
dontprint=swede[,fpc:=nmuni]
fit.naive = svydesign(data=swede, ids=~1, variables=~P85+P75+RMT85, fpc=~fpc)
total.naive = svytotal(~RMT85+P75+P85, fit.naive)
total.naive
cat("Theta =",total.naive[1]*total.naive[2]/total.naive[3],"\n")
matrix(total.naive[2]/total.naive[3],
total.naive[1]/total.naive[3],
total.naive[1]*total.naive[2]/total.naive[3]^2,nc=1)
total.naive[2]/total.naive[3]
total.naive[1]/total.naive[3]
matrix(c(total.naive[2]/total.naive[3],
total.naive[1]/total.naive[3],
total.naive[1]*total.naive[2]/total.naive[3]^2),nc=1)
matrix(c(total.naive[2]/total.naive[3],
total.naive[1]/total.naive[3],
-total.naive[1]*total.naive[2]/total.naive[3]^2),nc=1)
vcov(total.naive)
(dfhat=matrix(c(total.naive[2]/total.naive[3],
total.naive[1]/total.naive[3],
-total.naive[1]*total.naive[2]/total.naive[3]^2),nc=1))
(V=vcov(total.naive))
t(dfhat) %*% V %*% dfhat
dontprint = swede[,u:=RMT85*dfhat[1]+P75*dfhat[2]+P85*dfhat[3]]
fit.naive = svydesign(data=swede, ids=~1, variables=~u, fpc=~fpc)
total.naive = svytotal(~u, fit.naive)
total.u = svytotal(~u, fit.naive)
vcov(total.u)
?svrepdesign
mean(4,6)
seq_len(k)
seq_len(4)
rep.int(seq_len(4), 3)
factor(rep.int(seq_len(4), 3))
rep(1:4,3)
as.matrix(rep(1:4,3),4,3)
as.matrix(rep(1:4,3),c(4,3))
?as.matrix
as.matrix(rep(1:4,3),4,3)
as.matrix(rep(1:4,3),3,4)
as.matrix(rep(1:4,3),nrow=3,ncol=4)
as.matrix(rep(1:4,3),nrow=3,ncol=4)
rep(1:4,3)
as.matrix(rep(1:4,3),3)
as.matrix(rep(1:4,3),4)
matrix(rep(1:4,3),4)
matrix(rep(1:4,3),3)
n = 16
truemu = 5
truesig = .5
njudge = 9
jsig = .2
truescores = rnorm(n,truemu,truesig)
judgescores = matrix(rnorm(n*njudge,truescores,jsig),n)
jscores = matrix(rnorm(n*njudge,truescores,jsig),n)
jscores
js = vmin(jscores,6)
xmin
?min
js = pmin(jscores,6)
js
?apply
n = 16
truemu = 5.2
truesig = .5
njudge = 9
jsig = .2
truescores = rnorm(n,truemu,truesig)
jscores = matrix(rnorm(n*njudge,truescores,jsig),n)
jscores = pmin(jscores,6)
medians = apply(jscores,1,median)
order(medians)
order(truescores)
rank(medians)
rank(truescores)
var(rank(medians)-rank(truescores))
means = apply(jscores,1,mean)
var(rank(medians)-rank(truescores))
var(rank(means)-rank(truescores))
onerun = function() {
n = 16
truemu = 5.2
truesig = .5
njudge = 9
jsig = .2
truescores = rnorm(n,truemu,truesig)
jscores = matrix(rnorm(n*njudge,truescores,jsig),n)
jscores = pmin(jscores,6)
medians = apply(jscores,1,median)
means = apply(jscores,1,mean)
data.table(
medvar = var(rank(medians)-rank(truescores)),
meanvar = var(rank(means)-rank(truescores)),
medwin = (order(medians)[1] == order(truescores)[1]),
meanwin = (order(means)[1] == order(truescores)[1])
)
}
onerun = function() {
n = 16
truemu = 5.2
truesig = .5
njudge = 9
jsig = .2
truescores = rnorm(n,truemu,truesig)
jscores = matrix(rnorm(n*njudge,truescores,jsig),n)
jscores = pmin(jscores,6)
medians = apply(jscores,1,median)
means = apply(jscores,1,mean)
data.table(
medvar = var(rank(medians)-rank(truescores)),
meanvar = var(rank(means)-rank(truescores)),
medwin = (order(medians)[1] == order(truescores)[1]),
meanwin = (order(means)[1] == order(truescores)[1])
)
}
allresults = data.table()
for (i in 1:100) {
allresults = rbind(allresults, onerun(),fill=T)
}
allresults = data.table()
library(data.table)
library(data.table)
onerun = function() {
n = 16
truemu = 5.2
truesig = .5
njudge = 9
jsig = .2
truescores = rnorm(n,truemu,truesig)
jscores = matrix(rnorm(n*njudge,truescores,jsig),n)
jscores = pmin(jscores,6)
medians = apply(jscores,1,median)
means = apply(jscores,1,mean)
data.table(
medvar = var(rank(medians)-rank(truescores)),
meanvar = var(rank(means)-rank(truescores)),
medwin = (order(medians)[1] == order(truescores)[1]),
meanwin = (order(means)[1] == order(truescores)[1])
)
}
allresults = data.table()
for (i in 1:100) {
allresults = rbind(allresults, onerun(),fill=T)
}
allresults
colmeans(allresults)
apply(allresults,2,mean)
library(data.table)
onerun = function() {
n = 16
truemu = 5.2
truesig = .5
njudge = 9
jsig = .2
truescores = rnorm(n,truemu,truesig)
jscores = matrix(rnorm(n*njudge,truescores,jsig),n)
jscores = pmin(jscores,6)
medians = apply(jscores,1,median)
means = apply(jscores,1,mean)
data.table(
medvar = var(rank(medians)-rank(truescores)),
meanvar = var(rank(means)-rank(truescores)),
medwin = (order(medians)[1] == order(truescores)[1]),
meanwin = (order(means)[1] == order(truescores)[1])
)
}
allresults = data.table()
for (i in 1:1000) {
allresults = rbind(allresults, onerun(),fill=T)
}
apply(allresults,2,mean)
jscores
apply(jscores,1,rank)
T(apply(jscores,1,rank))
t(apply(jscores,1,rank))
library(data.table)
onerun = function() {
n = 16
truemu = 5.2
truesig = .5
njudge = 9
jsig = .2
truescores = rnorm(n,truemu,truesig)
jscores = matrix(rnorm(n*njudge,truescores,jsig),n)
jscores = pmin(jscores,6)
jranks = t(apply(jscores,1,rank))
medians = apply(jranks,1,median)
means = apply(jranks,1,mean)
data.table(
medvar = var(rank(medians)-rank(truescores)),
meanvar = var(rank(means)-rank(truescores)),
medwin = (order(medians)[n] == order(truescores)[n]),
meanwin = (order(means)[n] == order(truescores)[n])
)
}
allresults = data.table()
for (i in 1:1000) {
allresults = rbind(allresults, onerun(),fill=T)
}
apply(allresults,2,mean)
apply(allresults,2,mean)
qchisq(1)
qchisq(1,1)
qchisq(1,2)
pchisq(1,2)
pchisq(2,2)
pchisq(3,2)
pchisq(1,1)
pchisq(100,100)
pchisq(1000,1000)
matrix(1:4,nrow=2)
library(knitr)
knitr::version
sessionInfo()
save.image("~/Empty.RData")
?pt
pt(0,5)
pt(2,5)
?lm
?pt
?corr.test
pf
?pf
for (i in 0:3) {print(c(.3,.4) * (2/3)^i)}
for (i in 0:3) {print(c(.3,.4) * (3/4)^i)}
for (i in 0:3) {print(c(.5) * (3/4)^i)}
?qplot
library(ggplot2)
library(data.table)
varidat = data.table(x=(-200:200)/100)
truepost = varidat[,]
truepost[,series:="True posterior"]
truepost[,y:=-x^2+sin(x^2)/2]
qplot(varidat,x=x,y=y)
?qplot
qplot(x,y,varidat)
head(varidat)
qplot(x,y,data=varidat)
truepost[,y:=-x^2+sin(4*x^2)/2]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+sin(4*x^2)/(x^2+1)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+sin(4*x^2)/2/(x^2+1)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+sin(4*(x-1)^2)/1.5/((x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+sin(4*(x-1)^2)/1.5/(3*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(4*(x-1)^2)/1.5/(3*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*(x-1)^2)/1.5/(6*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*(x-1)^(1/3))/1.5/(6*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*(x-1)^(1/3))/1.5/(6*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*arctan(x-1))/1.5/(6*(x-1)^2+.8)]
truepost[,y:=-x^2+cos(8*atan(x-1))/1.5/(6*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*atan(x-1))/2/(6*(x-1)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*atan(x-1.5))/2/(6*(x-2)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-x^2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=1-x^2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=log(1+x^2/5)*3+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
varidat = data.table(x=(-300:300)/100)
truepost = varidat[,]
truepost[,series:="True posterior"]
truepost[,y:=log(1+x^2/2)*3+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
truepost[,y:=1-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=varidat)
varidat = data.table(x=(-300:300)/100)
truepost = copy(varidat)
truepost[,series:="True posterior"]
truepost[,y:=1-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=truepost)
truepost[,y:=3-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
qplot(x,y,data=truepost)
qplot(x,y,data=varidat)
combined = data.table()
varidat = data.table(x=(-300:300)/100)
varidat[,series:="True posterior"]
varidat[,y:=3-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
combined = rbind(combined,varidat,fill=T)
combined = data.table()
varidat = data.table(x=(-300:300)/100)
varidat[,series:="True posterior"]
varidat[,y:=3-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Best Gaussian"]
varidat[,y:=-x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Underdispersed"]
varidat[,y:=log(2)-2*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Overdispersed"]
varidat[,y:=-log(2)-.5*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Misplaced"]
varidat[,y:=log(2)-2*(x-1.5)^2]
combined = rbind(combined,varidat,fill=T)
qplot(x,y,data=combined)
qplot(x,y,color=series,data=combined)
combined[y< -10, y:=NA]
qplot(x,y,color=series,data=combined)
combined = data.table()
varidat = data.table(x=(-300:300)/100)
varidat[,series:="True posterior"]
varidat[,y:=3-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Best Gaussian"]
varidat[,y:=-x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Underdispersed"]
varidat[,y:=log(2)-2*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Overdispersed"]
varidat[,y:=-log(2)-.5*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Misplaced"]
varidat[,y:=log(16)-16*(x-1.3)^2]
combined = rbind(combined,varidat,fill=T)
combined[y< -10, y:=NA]
qplot(x,y,color=series,data=combined)
varidat[,y:=log(16)-16*(x-1.45)^2]
combined = data.table()
varidat = data.table(x=(-300:300)/100)
varidat[,series:="True posterior"]
varidat[,y:=3-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Best Gaussian"]
varidat[,y:=-x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Underdispersed"]
varidat[,y:=log(2)-2*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Overdispersed"]
varidat[,y:=-log(2)-.5*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Misplaced"]
varidat[,y:=log(16)-16*(x-1.45)^2]
combined = rbind(combined,varidat,fill=T)
combined[y< -10, y:=NA]
qplot(x,y,color=series,data=combined)
combined = data.table()
varidat = data.table(x=(-300:300)/100)
varidat[,series:="True posterior"]
varidat[,y:=3-log(1+x^2/3)*2+cos(8*atan(x-1.5))/2/(6*(x-1.5)^2+.8)]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Best Gaussian"]
varidat[,y:=-x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Underdispersed"]
varidat[,y:=log(2)-2*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Overdispersed"]
varidat[,y:=-log(2)-.5*x^2]
combined = rbind(combined,varidat,fill=T)
varidat[,series:="Misplaced (local maximum)"]
varidat[,y:=log(16)-16*(x-1.46)^2]
combined = rbind(combined,varidat,fill=T)
filtered = combined[y> -10, ]
qplot(x,y,color=series,data=filtered)
qplot(x,y,color=series,data=filtered) + theme_void()
library(rjson)
?fromJSON
o = fromJSON(file="../testresults/fit_amortized_laplace_0_N44_mu1.0_sigma-2.0_nu-1.0.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
o = fromJSON(file="../testresults/fit_amortized_laplace_0_N44_mu1.0_sigma-2.0_nu-1.0.csv")
o
unlist(o$hessian)
o = fromJSON(file="../testresults/fit_amortized_laplace_0_N44_mu1.0_sigma-2.0_nu-1.0.csv")
unlist(o$hessian)
rawhess = unlist(o$hessian)
length(rawhess)
sqrt(length(rawhess))
hess = matrix(rawhess,d,d)
d = sqrt(length(rawhess))
hess = matrix(rawhess,d,d)
dim(hess)
hess[1:4,1:4]
?dnorm
?dmvnorm
?dmvrnorm
?mvrnorm
library(mvtnorm)
dmvnorm(c(0,0),c(1,1),diag(2))
dmvnorm(c(0,0),c(0,0),diag(2))
dmvnorm(matrix(0,2,5),c(0,0),diag(2))
dmvnorm(matrix(0,5,2),c(0,0),diag(2))
results = extract(fittin)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggplot2)
library(reshape2)
library(data.table)
library(rjson)
library(mvtnorm)
denses = fread("../testresults/demo_amortized_laplace.fitted.csv")
names(denses)
denses[,list(mean(as.numeric(modelKL)),
mean(as.numeric(laplace)),
mean(as.numeric(meanfield))), by=list(obs,df,sig)]
denses[obs=="7.0",]
fitting = fread("../testresults/demo_amortized_laplace.fitting.csv")
names(fitting)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggplot2)
library(reshape2)
library(data.table)
library(rstan)
rstan_options(auto_write = TRUE)
model = stan_model("../stan/multisite.stan")
data = fread("../testresults/scenario_N44_mu1.0_sigma2.0_nu3.0.csv")
fit1 = sampling(model, data = list(N=length(data[,s]), se=data[,s], x=data[,x]))
plot(fit1)
fitframe = extract(fit2)
plot(fit2)
fitframe = extract(fit1)
names(fitframe)
fitframe$T
type(fitframe)
hess[0:8,0:5]
